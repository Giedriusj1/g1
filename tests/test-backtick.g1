(and

 ;; backtick simple atoms
 (test-equal (backtick 1) (backtick 1) )
 (test-equal (backtick a) (backtick a) )
 (test-equal `a (backtick a))
 (test-equal `1 (backtick 1))
 (test-equal `1 `1)

 ;; backtick a list
 (test-equal `(a b c) `(a b c))
 (test-equal (backtick (a b c)) (backtick (a b c)))
 (test-equal `(a b c) (backtick (a b c)))

 ;; nested lists
 (test-equal `(a (b c) d) `(a (b c) d))

 (test-equal `(a (b c) d) (backtick (a (b c) d)))

 (test-equal `(a `(b c) d) (backtick (a (backtick (b c)) d)))

 (test-equal (equal `(a (b c) d) `(a (b c) ddddddddddddddddddd )) nil)

 ;; backtick a backtick
 (test-equal (backtick (backtick a)) (backtick (backtick a)))

 (test-equal `(backtick a) (backtick (backtick a)))

 (test-equal ``a (backtick (backtick a)))

 (test-equal `````a (backtick(backtick(backtick (backtick (backtick a))))))

 (test-equal `````a  `````a)

 ;; Quoting symbols and numbers
 (test-equal (backtick symbol) `symbol)
 (test-equal (backtick 42) 42)

 ;; ;; Quoting special characters
 (test-equal (backtick (+ 2 2)) `(+ 2 2))
 (test-equal (backtick (setq x 10)) `(setq x 10))

 ;; Quoting functions and expressions
 (test-equal (backtick (lambda (x) (+ x 1))) `(lambda (x) (+ x 1)))

 ;; Quoting within expressions
 (test-equal (list `backtick `a) ``a)
 (test-equal (list `backtick ``a) ```a)

 ;; Quoting within nested lists
 (test-equal (list `backtick (list `a `b)) ``(a b))
 (test-equal (list `backtick (list `backtick `a)) ```a)

 ;; ;; Quoting empty list
 (test-equal (backtick ()) `())

 ;; Quoting special forms
 (test-equal (list `backtick (backtick (setq x 10))) ``(setq x 10))
 )
