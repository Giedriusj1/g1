(and

 ;; quote simple atoms
 (test-equal (quote 1) (quote 1) )
 (test-equal (quote a) (quote a) )
 (test-equal 'a (quote a))
 (test-equal '1 (quote 1))
 (test-equal '1 '1)

 ;; quote a list
 (test-equal '(a b c) '(a b c))
 (test-equal (quote (a b c)) (quote (a b c)))
 (test-equal '(a b c) (quote (a b c)))

 ;; nested lists
 (test-equal '(a (b c) d) '(a (b c) d))

 (test-equal '(a (b c) d) (quote (a (b c) d)))

 (test-equal '(a '(b c) d) (quote (a (quote (b c)) d)))

 (test-equal (equal '(a (b c) d) '(a (b c) ddddddddddddddddddd )) nil)

 ;; quote a quote
 (test-equal (quote (quote a)) (quote (quote a)))

 (test-equal '(quote a) (quote (quote a)))

 (test-equal ''a (quote (quote a)))

 (test-equal '''''a (quote(quote(quote (quote (quote a))))))

 (test-equal '''''a  '''''a)

 ;; Quoting symbols and numbers
 (test-equal (quote symbol) 'symbol)
 (test-equal (quote 42) 42)

 ;; ;; Quoting special characters
 (test-equal (quote (+ 2 2)) '(+ 2 2))
 (test-equal (quote (setq x 10)) '(setq x 10))

 ;; Quoting functions and expressions
 (test-equal (quote (lambda (x) (+ x 1))) '(lambda (x) (+ x 1)))

 ;; Quoting within expressions
 (test-equal (list 'quote 'a) ''a)
 (test-equal (list 'quote ''a) '''a)

 ;; Quoting within nested lists
 (test-equal (list 'quote (list 'a 'b)) ''(a b))
 (test-equal (list 'quote (list 'quote 'a)) '''a)

 ;; ;; Quoting empty list
 (test-equal (quote ()) '())

 ;; Quoting special forms
 (test-equal (list 'quote (quote (setq x 10))) ''(setq x 10))

 )
