;; This file is loader before any other file.

;; Helpful when debugging
(defmacro dbg (var)
  (eval `(message (cons var ,var))))

(defmacro set (var val)
  (eval `(setq ,(eval var) ,val)))

(defmacro lambda (params body)
  `(,params
    ,body))

(defmacro defun
    (name params body)
  (eval `(setq ,name
	       (lambda
		 ,params
		 ,body))))

(defmacro increment (var)
  (eval `(setq ,var (+ ,var 1))))

(defmacro decrement (var)
  (eval `(setq ,var (- ,var 1))))

;; Example:
;; (dotimes (a 4)
;;   (message a))
(defmacro dotimes (bind body)
  (eval `(let ((,(car bind) 0))
	   (while (< ,(car bind) ,(car (cdr bind)))
	     (progn
	       ,body
	       (increment ,(car bind)))))))

;; Executes body iter times
(defmacro loop (iter body)
  (eval `(dotimes (i ,iter) ,body)))

;; Basically an if statement without the else part
(defmacro when (condition action)
  (if condition
      (eval action)))

;; (number-sequence 1 10) will generate (1 2 3 4 5 6 7 8 9 10)
;; TODO: handle edge cases, such as (number-sequence 1 1) and (number-sequence 1 0)
(defmacro number-sequence (from to)
  (let ((sequence '()))
    (while (> (+ to 1) from )
      (progn
	(setq sequence (cons (+ (- to from) 1) sequence))
	(increment from)))
    sequence))

(defun reverse (seq)
  (let ((reversed '()))
    (while (equal (equal seq '()) nil)
      (progn
	(setq reversed (cons (car seq) reversed))
	(setq seq (cdr seq))))

    reversed))

;; Example:
;; (seq-filter (lambda (a)
;; 	      (progn
;; 		(if (< a 5) t)))
;; 	    '(1 2 3 4 5 6 7 8 9 10))
(defmacro seq-filter (filter l)
  (let ((filtered '()) (remainingList (eval l)))
    (while (equal (equal remainingList '()) nil)
      (progn
	(if ((eval filter) (car remainingList))
	    (setq filtered (cons (car remainingList) filtered )))

	(setq remainingList (cdr remainingList))))
    (reverse filtered)))

(defun length (seq)
  (let ((len 0))
    (while (equal (equal seq '()) nil)
      (progn
	(increment len)
	(setq seq (cdr seq))))
    len))

;; Example:
;; (dolist (a '(1 2 3 4 5 6 7 8 9 10))
;;   (message a))
(defmacro dolist (bind body)
  (eval `(let ((dolistRemaining ,(car (cdr bind))))
	   (while (equal (equal dolistRemaining '()) nil)
	     (let ((,(car bind) (car dolistRemaining)))
	       (progn
		 ,body
		 (setq ,(car bind) (car dolistRemaining))
		 (setq dolistRemaining (cdr dolistRemaining))))))))
